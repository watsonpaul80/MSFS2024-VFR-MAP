// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\xeb\x93\xdb\x36\x92\xff\xbe\x55\xfb\x3f\x20\xd8\x4a\x59\xaa\x50\x10\x9f\x7a\x59\xd2\xc6\xf1\x23\xc9\xdd\x38\x76\xd9\x4e\x52\x77\x71\x4a\x05\x91\x18\x8a\x3b\x20\xc0\x22\xa0\xd1\x8c\xa7\xe6\x7f\xbf\x02\x48\x4a\x00\x45\x69\x66\xbc\x1f\xf6\x92\x0f\xb1\x08\x74\xff\xfa\x81\x46\x37\xd8\xe0\xcc\xbf\x79\xf5\xee\xe5\xa7\xff\x79\xff\x1a\x6c\x64\x4e\x97\x7f\xff\xdb\xbc\xfe\x17\x80\xf9\x86\xe0\x44\xff\x02\x60\x2e\x33\x49\xc9\x32\x17\x97\xc2\x77\x7d\x77\x90\xf2\xe1\xf5\x65\x99\xe3\x62\x3e\xac\x66\x6a\x32\x9a\xb1\x2b\x50\x12\xba\x80\x59\xcc\x19\x04\xf2\xb6\x20\x0b\x98\xe5\x38\x25\xc3\x82\xa5\x10\x6c\x4a\x72\xb9\x80\x09\x96\x78\xb6\x1f\x7d\xbe\xc6\x82\x8c\x42\x27\xfb\xed\x87\x77\x1f\x76\xee\x7f\xff\x98\xf2\x05\x3c\x46\x14\xf2\x96\x12\xb1\x21\x44\x36\x30\x94\xe0\x4b\x4a\xe4\xbf\xc4\xb0\xfe\x85\x62\x21\x20\x18\x36\xbc\x39\x91\x18\x30\x9c\x93\x05\xc4\x45\x41\xc9\x20\xe7\xeb\x8c\x92\xc1\x8e\xac\x07\xb8\x28\x06\x31\x2e\xf0\x9a\x12\x08\x62\xce\x24\x61\x72\x01\x6f\x89\x80\x8f\xe5\x16\x12\xcb\xad\x18\xac\x71\x39\xd0\xaa\x19\x30\x6b\x8a\xe3\xab\x47\x03\x69\x0f\x1a\xdc\xbf\xbd\xf9\xf0\x16\x17\x7b\x76\x11\x97\x59\x21\x81\x28\xe3\x2e\x8b\xff\x25\xe0\x72\x3e\xac\x68\x1e\xc7\x51\x72\x89\x25\x49\xde\xe2\xf2\x8a\x94\xdd\xfc\xca\x9c\x7a\xed\x24\xb9\x91\x43\xe5\xd6\x7a\x12\xe8\x40\x71\xc0\x9a\x27\xb7\xe0\xae\x19\x03\x60\x43\xb2\x74\x23\x67\xc0\x73\xdd\x6f\x9f\x1f\x86\x73\x5c\xa6\x19\x9b\x01\xd7\x18\x2b\x70\x92\x64\x2c\x35\x07\xef\xff\xfe\xb7\xe6\x67\x1b\x38\xc9\x44\x41\xf1\xed\x0c\x5c\x52\x72\x63\xa0\xa8\xc7\x41\x92\x95\x24\x96\x19\x67\x33\x10\x73\xba\xcd\x59\x17\xe2\x3f\x72\x5c\x98\x88\x6b\x1c\x5f\xa5\x25\xdf\xb2\x64\x10\x73\xca\xcb\x19\x48\x4b\x7c\xdb\x86\x4e\x4b\xbe\x9b\x01\xaf\x13\x70\x93\x25\x64\xb0\xd9\x26\x26\x6a\xc1\x45\x56\x69\x82\xd7\x82\xd3\xad\x24\x06\xa2\xe4\x85\xed\x03\x4a\x2e\xa5\x3d\xf2\x65\x90\xb1\x84\xdc\xcc\x80\x17\x76\xfa\x0a\x45\x24\x37\x26\x6a\xcd\x75\xa4\x99\xaa\x73\x26\x07\x22\xfb\x42\x66\xc0\xb3\xe8\xf5\xc4\xae\x5e\xa4\x35\xa7\xc9\xc3\x58\xf1\xb6\x14\x6a\xbc\xe0\x19\x93\xa4\x34\x3d\xd1\xf2\xc3\x6c\xc3\xaf\x49\x69\x7a\xa3\x86\xdc\x6d\x32\xc3\x0f\x96\x0b\x5b\xde\x6b\xec\xb4\xb5\x56\xd1\x37\xc0\x34\x4b\xd5\x02\x13\x4b\x8b\x13\x32\x6c\x17\xb4\x9c\x76\xbc\xf2\xb6\xcd\x6d\x05\x45\x81\x19\xba\xcc\x08\xed\xd2\x75\x50\x56\xce\xb4\x57\xe6\xfe\x18\xe0\x1a\xd3\x2d\x31\x01\x0c\x0d\x7d\xe4\x3e\x82\x79\x25\x72\x4c\xe9\x09\x08\xcf\x82\x38\xa8\x57\x87\x18\xf2\x3a\x05\x48\x42\x49\xc1\x4b\x39\x28\x78\xb1\x2d\x40\xd1\xb5\x18\x2e\xf2\x2d\xe4\xae\xcd\x7c\x66\x85\xce\x08\xa3\x78\x4d\xe8\x59\x9f\xfa\xc7\x5a\xcf\x87\x3a\x31\x2d\x9b\x45\x9a\x5b\x59\x0b\x00\xb8\x15\x04\x08\x59\x66\xb1\x84\xcf\x0f\x2b\x49\x89\x04\x9b\xed\x21\xde\xd5\x73\x8e\x8b\xd6\xb3\x4a\x86\x1d\x43\x9f\x6a\xcd\x3b\xa6\x7e\x8e\x39\xb3\x86\xb5\x71\xd6\xc8\x4e\xd8\x04\x14\x33\xb2\x3a\x26\x6b\xdc\xd3\x31\x75\xc9\x29\xe5\xbb\x95\xe6\x04\x0b\x70\x89\xa9\x20\x16\x01\xc5\x42\xae\x4a\xcd\x0e\x16\xe0\xee\xde\x9a\x14\xd7\xe9\x7b\xc5\xa9\x54\xfd\x28\xcb\x8c\xa5\x60\x01\x9e\xcd\xff\x79\x93\x53\x70\x4d\x4a\x91\x71\xb6\x80\x1e\x72\x21\x20\x2c\xe6\x6a\x01\x16\xf0\xd7\x4f\x6f\x06\x13\x08\x84\xc4\x2c\xc1\x94\x33\xb2\x80\x8c\xc3\x7f\x2e\xe7\xe2\x3a\x05\x37\x39\x65\x62\x01\x37\x52\x16\xb3\xe1\x70\xb7\xdb\xa1\x5d\x80\x78\x99\x0e\x7d\xd7\x75\x87\xe2\x5a\x55\x78\x9d\x63\x16\xd0\x0f\xa7\x68\x12\x42\xb0\xcb\x12\xb9\x51\x8f\x13\xe4\x47\xd0\x16\xbb\xd4\xb5\x51\x9d\x06\x40\x96\x2c\x60\xf3\x30\x85\xc3\xe5\xbc\xc0\x72\xa3\x47\xd5\x8f\x68\xec\x87\x10\x24\x0b\xf8\x16\xf8\xe1\x18\x45\x5e\xe8\x86\x8e\x17\xf9\x28\x74\xfd\xd1\x08\x78\xc1\x14\xb9\xd1\x78\xe2\x39\x63\x0f\x4d\x5c\x77\x1a\x8e\x40\x0c\x5c\x34\x71\xfd\xd1\xc4\x19\x78\x3e\x0a\x23\x6f\x12\x46\xc0\x43\x81\x1f\x8e\x03\x67\x10\xba\xc8\x8f\x46\x8a\xd7\x45\x93\x28\x54\x54\x61\x84\x42\x6f\x1c\x4d\xa7\x60\x10\xa0\x69\xe8\x06\xa1\x33\x08\x03\xe4\x8f\x46\xe1\xc8\x07\x83\xc0\x43\x7e\xe0\x7a\x13\x67\xe0\x87\x68\x14\xb8\x9e\x37\x0d\xf4\x68\x38\x09\x82\xc8\x19\x44\x28\xf0\xdd\x60\x34\x06\x03\x17\xb9\xa3\x69\xe0\x44\xc8\x9f\x78\xc1\xc8\x03\x03\x0f\xb9\x5e\xe4\xfa\x4e\xe0\xa3\x68\x3a\x09\x26\x13\x35\xe4\xb9\xe1\xd8\x73\x22\x17\x4d\x82\xd1\xc8\xf7\xc1\x85\x0a\xfa\x49\xe8\x8f\xbd\xb1\xe3\x45\x21\x0a\xc6\xd1\xc8\x07\xae\xe3\x4d\x5c\xe4\x4d\xa3\x71\x04\x28\xf0\x3c\x17\x45\xae\x1b\x4d\x9c\x41\xe4\xa2\x70\xe2\x07\x53\x10\xa0\xe9\x34\x08\x7c\x67\xe2\x22\x7f\xea\x8d\x94\x4e\x3e\x72\x43\x3f\x1a\x8d\x1d\xdf\x47\xd3\x60\xe2\x8d\x94\x4e\xbe\x1b\x4c\xc2\xc8\xf1\x46\x68\x32\x1d\x4d\x03\x10\xfa\x48\xc9\x1a\xfb\xce\xc0\xf3\x50\x34\x8d\xb4\x2f\x5c\x77\xe2\xb8\xc8\x0b\xa6\x91\x22\x18\x7b\x81\xe7\x39\x9e\x8b\xa6\xde\x64\x3c\x55\x28\x91\x3b\xf5\xa7\xce\x40\xa1\x4c\x7c\xaf\x12\x16\x46\xc1\x38\x74\x06\xbe\x8f\x82\xe9\xd4\x0d\x80\x8f\x46\x9e\x17\xf8\xce\x60\xe2\xa2\x20\xf2\xdd\x08\x78\x9e\x87\x82\x68\x3a\x8d\x9c\x70\x82\x22\x77\xe4\x79\x0a\x6b\x1c\x84\x53\xc5\x17\xa1\xf1\xd8\x9f\x46\xe0\x0b\x04\x97\x19\xa5\x83\x72\x4b\xc9\x02\x92\x6b\xc2\x78\x92\x54\x63\x0b\xb8\x5a\xbd\x7c\x77\xf1\xee\xc3\x6a\xa5\x62\x43\x45\xda\xf2\x99\xbd\xc5\x8b\x26\xd0\x7f\x50\x29\x1d\x2c\xc0\x05\x52\x67\xd0\x9e\x91\x64\xd4\xf3\xaf\x25\x9d\x55\xd1\x4e\x7e\xfd\xf0\x73\xcf\x3c\x8a\x8a\xeb\xf4\xbb\x9b\x9c\x3a\x10\x7c\xd7\xb1\x73\xfa\xa8\x24\x05\xc5\x31\xe9\xc1\x7f\x40\x07\x7e\xeb\x07\xd0\x18\x3a\xa8\xe7\x80\xfa\xf8\xd7\x77\x6c\xc9\x1f\x75\xb6\xfe\x63\x14\x3a\x60\x14\xfe\xb9\x9f\xbc\xef\x1f\xe7\x08\x25\xf5\x77\x55\xd6\xfe\xa3\x66\xe8\xc2\xfa\xef\x9a\xf1\x63\x49\x08\xfb\x8f\x9a\x91\x2a\x0d\x9e\x64\x46\xf3\x90\xf0\x78\x9b\x13\x26\x11\x67\x57\xe4\x76\x5b\xa8\x04\xbc\x65\xfa\xbc\xd9\x53\xe1\x29\xfb\x66\x09\x03\xd9\x25\xa8\x86\xd1\x15\xb9\x05\x8b\xc5\x02\xc0\xd7\x22\xc6\x05\x81\x7d\x93\x4c\x9d\x06\xd3\x94\x92\x55\x95\xdb\x7b\x7d\xa3\x9a\x1e\x6a\xa6\x71\x14\x69\x64\x02\x5e\x10\xb6\xca\xd8\x2a\xe5\x5c\xf1\xe7\xb8\x10\x3d\x4b\x85\x6b\x5c\x82\x6d\x49\xc1\x02\xe8\x14\x2d\xea\x1c\x5d\xd1\xa3\x98\xe7\x43\xc5\x33\xfc\x5e\xf9\xd4\x28\x1c\x88\x62\x99\xc9\x6d\x42\xc0\x77\x00\x3a\x47\x93\x9c\xa5\xf6\x6c\x8e\x0b\x94\x12\xf9\xbf\x9c\xe7\xbd\xbe\x1a\xfd\x02\x0f\x3a\xec\x32\x96\xf0\x1d\x52\xba\xf6\xb6\x25\x75\x9e\xad\xd6\x14\xb3\xab\x67\xfd\xae\x53\xd6\xde\xb4\x6d\x91\x60\x49\xde\xe2\xa2\x97\x8b\xd4\x76\xab\xb6\xaa\xe0\x42\x07\x11\xc5\xf2\x82\xa5\x8a\x68\xaf\xb4\x03\xf4\x53\xa3\xa5\xe5\xce\xba\x54\x23\x41\xe4\x45\xc5\x59\x70\x71\x8a\xe2\x83\x7a\x31\xca\x38\x7b\xc1\x52\x4a\xb4\x08\xf5\x06\xac\x82\xcd\x88\x09\xf5\x9f\x51\xc7\x51\xc1\x05\xca\x18\x53\x27\x85\x1b\x55\x81\x7f\xd9\xe6\x6b\x52\x2a\x31\x4a\xc1\x3e\x92\xfc\x4d\x76\x43\x92\xde\xa8\xbf\x77\x9f\x49\xa2\x22\xf9\x40\x62\x29\x36\x1c\x9a\x72\x52\xe5\x74\x2d\xe8\xa7\x4f\x6f\x2f\xd4\x0a\xcf\x71\xf5\x1a\xfc\xf9\xe1\xb5\xae\xb5\xd9\x6b\x50\x8b\x3e\xb3\xa0\x9f\xe1\xb2\x42\x52\x73\x62\x3e\xc4\x4b\xd8\x72\x82\x8a\x76\xf3\x74\xd2\x5a\x34\xa0\x41\x0b\xcc\x3e\xf1\x63\x9f\xdf\x1f\x1d\x11\x4f\x04\xc4\x4f\xbf\xbe\x3a\x0a\x88\xcd\x36\x41\x98\x56\x6b\x6f\xb9\x5e\xad\x58\x33\xf1\xdc\xa6\xaf\x17\xf2\x88\xbc\x1e\x6f\x51\xe3\xac\x14\x05\x21\xc9\x31\x7a\x3d\xd1\xa2\xbf\x26\xa5\xcc\x62\x4c\x57\xdd\x5c\xf6\xf4\x09\x59\x2b\x59\x6e\x6d\x73\x60\x4f\x2f\x8d\x21\x56\xd3\xa8\xe5\xe9\xc3\x16\xca\x25\xc5\x85\x38\x12\xac\x47\x5b\x94\xb2\xcc\xf2\x23\x42\x35\xd8\xa2\x2b\xb7\x49\x42\xca\x55\x27\xb9\x31\xd7\xb5\xa9\x77\x6a\xab\x32\xb2\x03\xbf\x93\xf5\x47\x1e\x5f\x11\xd9\x83\x3b\x15\x9f\xca\x9e\x3a\x3d\x50\x1e\xeb\xbd\x86\x36\x5c\x48\x86\x73\x6d\xd6\xac\x8b\x40\x9f\x6c\xbf\x03\x70\xb8\x13\xf0\x10\x45\x3b\x81\x38\x53\x39\xc6\xcc\xc9\x56\x98\x0c\x87\x31\x67\x82\x53\x82\x28\x4f\x95\x02\x3a\x7d\x1a\x10\xf7\x36\x58\x4c\xb9\x20\x4f\x40\xd3\xf4\xa7\xe1\x72\x22\x04\x4e\x2d\x40\x72\x94\xab\x73\xa1\x0e\xe4\xff\xf5\xf1\xdd\x2f\xa8\xc0\xa5\x20\x3d\x82\x54\x05\x34\x37\xcb\xb1\x60\x45\x01\x75\xd2\x33\xe9\xec\xf7\x80\x5c\xa4\xd6\x76\xb5\x77\x93\x35\xa5\xf6\x71\x8e\x0b\xf0\xcd\x62\x01\xb6\x2c\x21\x97\x19\x23\x49\x6b\x33\xdb\xd9\xd9\x90\x7a\x6f\x5a\x7f\xb4\x87\x33\x96\x49\xc5\x74\x64\x77\x2b\x9b\xab\x73\xfc\xd8\x1f\x3b\x03\x0f\x8d\x23\x3f\xb0\xf5\x53\xf4\x5c\xe4\x75\x48\x5d\xa0\x4f\x19\x25\x17\xf8\x96\x94\xbd\xe6\x35\xe4\x4e\xdc\x23\x99\x51\xa2\x6b\x8e\x90\x25\x21\x52\xe5\x1e\xf5\x5a\x72\xf7\xe5\x7e\x78\x77\x73\x3f\xbc\xbb\xbd\x47\x05\x4b\xa1\x63\xdb\x95\xe3\x1b\x95\xf3\x66\xc0\x9b\x38\xd6\x78\xc6\xaa\x71\xdf\x1a\xbe\xe4\x65\x8e\xe5\x0c\x18\x0d\x4d\x6b\x5e\x6c\xd7\x09\xcf\x71\xc6\xc4\x0c\xfc\x01\xb1\x3e\x0a\xaa\xff\xc5\xf0\x4f\xc3\x65\xa6\xff\xb4\x71\x05\x61\x38\x2b\x56\x31\x8e\x37\x24\x59\xad\xb1\x20\x6a\x3d\x1e\x61\xaf\x4a\xcd\xa8\x66\x47\x8c\xc8\x61\x4a\xf8\x8e\xac\x35\xd0\x50\x90\xf2\x3a\x8b\xc9\x50\xe6\x62\xe8\x21\x17\xb9\xc3\x46\x50\x2d\xe1\xfb\xd7\xef\x3f\xfe\xf8\x6d\xf0\x62\xea\xba\x53\x2f\xf8\xbe\x60\x4f\x70\x57\xd8\xed\x2e\x7b\x58\xe6\x62\x06\x54\xca\x72\xec\xb2\x96\x10\x49\x62\xf9\x81\xc8\x8c\xe1\x0e\x02\xd3\x8b\xd0\xf3\xe1\x93\x96\x40\x96\x98\x89\x02\x97\x84\xc9\x0a\xfa\x8c\xe3\x85\xc4\x39\x61\x2b\x7d\x5a\x5f\xed\xea\xe3\xf6\x83\x4e\xaf\xb8\x74\x81\x95\x9c\x91\xf2\x2f\x11\x63\xb5\xa9\x92\x94\x25\xce\xd8\x53\xcd\xac\xb8\xfe\x4a\x86\xee\xb0\x24\xe5\x13\xcd\xd4\x3c\xba\x2d\xf8\x97\xb0\x34\xc6\xa5\xe4\xab\x04\x97\x57\xa7\xec\x54\x25\x57\x53\x25\xeb\x41\xbd\xe7\xc5\x40\x59\x9e\x52\xbe\xc6\x14\x09\x41\xd1\x25\x16\x92\xde\xea\xe4\xa1\xa0\x56\x98\xd2\xff\xf7\xd6\x9b\x0d\xc9\x43\x9e\x54\x85\x06\xe6\xb8\x68\xab\x4b\x95\x43\x14\xb6\xae\x22\x7f\x5a\xb2\xab\x86\xe5\x4c\xd5\x23\x6b\xfc\x4b\x65\x9f\x6b\x0d\x62\x29\xcb\x6c\xbd\x55\x95\xed\x25\x67\xb2\xe4\x74\x56\xf5\xe3\x5a\x6a\xda\xcb\x54\x71\xe9\x6a\x17\x57\x5c\xc8\x00\xea\xdd\x1d\xae\x0d\xe0\x9a\x4b\xc9\x73\x4a\x2e\x25\xb4\xec\xad\xe8\x11\x4e\x92\x17\x06\xe7\x89\xf3\xff\x71\x0d\x8c\x79\x71\xab\xdb\xaa\x9f\x21\x90\xb8\x4c\x89\x5c\x7c\x86\xd5\x4b\xd9\x67\x08\x74\x4b\x75\xf1\x19\x7e\x86\xcb\x77\x05\x51\x6f\xd7\x84\xa8\xa2\xad\x8f\xfc\xff\x96\x16\x75\x51\x7a\x48\xaa\x22\x7d\xf1\xf3\xfb\xaf\x93\x37\x1b\xea\xb7\x1c\x63\x1b\x3f\x24\xee\xa3\xa6\xfc\x7a\xeb\xf4\x86\xd2\xf9\xe2\x21\x49\x2f\x15\xe5\x91\xa0\x2e\x91\x9f\xb8\x3a\x81\x1d\xc7\x8e\xda\xb4\x6f\x71\xa1\xce\x4a\xad\x77\x2b\x68\xad\x15\x9c\xa9\xd8\x76\x5a\x24\x95\xa5\xe0\x53\x95\xbd\xe1\xac\x55\x04\x4e\x91\xab\x9a\x76\x20\x36\x8a\xe3\x09\x86\xdf\x55\xda\x3c\x30\xe8\x2c\xda\x26\xd5\xae\x00\xaf\x54\xae\xea\xfd\xa2\x42\x11\xbc\xe5\x09\xe9\xc3\x99\x91\xc5\x0c\x9e\xfd\x51\xba\x75\x50\xba\x26\x25\xc5\xb7\x27\x3c\xf2\x0b\xbe\xce\x52\xfd\xca\x80\x29\x78\xa5\xce\xc8\xb3\x13\x47\xab\x2e\x49\x00\x18\x1b\xb4\x4a\x19\xbd\xc6\xfd\x8e\x29\xb9\x7f\x6a\xc1\xaa\x3e\x82\xde\xe8\xd5\x4f\xf5\xda\xdb\xca\x45\x59\xac\x36\xba\xdd\xa9\xb4\x7c\x55\x9a\x2d\x88\x19\x70\x3b\x27\xdf\x95\x99\xbe\x86\x81\x55\xfa\x32\xd3\xa9\x95\x37\xea\xce\x86\xa5\x6f\x6b\x6e\x9d\xb1\xe4\x3d\x2f\xb6\x45\xef\x02\xe9\x3e\x43\xef\x0e\x6f\x25\x7f\x8f\x59\x9d\xdb\xee\xfb\xad\xde\x89\x7a\x7c\x59\xdd\x54\xf7\xcc\xfe\x84\xca\xe0\xfd\xe3\x10\xae\xe4\xbc\xb7\xcf\xfb\xae\xe3\x1e\xeb\xd2\xdc\xb4\x98\x1e\xdc\x73\x3b\xe0\xae\xc3\xb4\x86\xe5\x9c\x89\x7b\x9a\x47\x9a\xda\xd8\x66\xdf\xc9\x1c\xcc\x6b\xd0\x05\x91\xab\x3d\x4d\x5b\xdd\xca\x0f\x56\x9d\x42\x9c\xf5\x9e\x25\x25\x4e\x85\xc4\xa5\x7c\xe6\x9c\x7a\x2d\x04\xed\x2b\x1f\xfb\x10\x7b\xae\x79\x78\xdf\x0e\xc8\x4a\x68\x4c\xb3\xf8\xea\x9c\xc0\x2e\x53\x88\x5a\x2b\xca\xd2\x47\xe0\xab\x6d\xa2\x77\x4c\xbc\xc1\x2c\x25\xe7\x24\xe9\x0e\x29\xd2\xaf\xfb\x8b\xc5\xe9\xb4\xd0\xd1\x4a\x6a\x7a\x74\x6a\xdb\xf4\xec\x1e\x79\xab\xb5\x04\x08\x15\xa4\x2d\xc9\x4a\x6e\x8f\x86\xd7\xbd\xeb\x4e\xf8\x47\x02\xe8\x0d\x7e\xa2\xf5\x65\x6d\xd6\xae\x96\x68\xd7\xb2\xd4\x8b\x62\xca\x6f\x85\xf9\x61\xb7\x1e\x2f\x60\x2b\xa6\xd3\x42\xd4\x77\xd3\x0b\x50\x11\xab\x45\xdf\xb7\x23\x27\x7d\xa3\x1d\x5c\xcd\xb2\xd4\x98\x7d\x6e\xf7\x10\xcc\x96\x71\xd3\x85\x6b\x79\xba\x25\x7f\xdf\xc4\x3b\x28\x71\x0c\xd1\xd9\x6c\xe8\xf0\xd6\x1e\x7b\x43\x4a\xd2\xee\xdd\x1c\x7a\x0e\x2d\x6f\xa5\x7b\x6f\xb5\x8f\xd7\x46\x6b\x46\xe8\x1b\x87\xec\xf2\xb6\x67\x1a\xd3\xae\x3f\xf2\xb6\x20\x70\x06\x60\xa3\x08\x6c\x17\x41\x8a\x25\x9c\x01\xdd\xe7\x79\x43\x39\x3e\x4a\x31\xfb\xe5\x40\xa2\xa0\x99\xec\x41\x07\xf6\xff\x70\xff\xec\x1f\xe1\xb0\xf4\xe9\x38\xde\x31\x4e\xe3\xe1\xb3\x60\xf6\x1a\xa9\x88\x70\x51\xe4\x9c\x08\xe8\xbe\xf5\x71\xc6\xa1\x6b\xd5\x6a\x1a\xed\x04\x12\x84\x25\xf6\x70\xe7\x9a\xda\xa9\xce\x74\xf9\x03\xdd\x67\xb3\x32\x55\x64\x76\x6b\xb5\x1a\xab\xc8\xcc\x5e\x6a\xd7\xf6\x7e\x08\x2b\xe1\xec\x59\x73\x51\xdf\x81\x78\xf8\xd9\x4a\xec\xdf\x98\xcf\x67\xfd\xb0\xc9\x12\xb2\xda\x6c\x13\xdb\x05\x3a\x4c\x37\xdb\x04\x2c\x0e\x17\x55\x29\x91\xaf\x29\x51\x3f\x7f\xb8\xfd\x39\xe9\xc1\xcd\x36\xb1\x4e\x9f\xba\xb5\xab\xcf\xa8\xa8\xfe\xae\x4a\x59\xc0\xb8\xad\xf3\x83\xa8\xf5\x67\x3f\x4f\x86\xbe\xef\xb8\x5b\xc3\x49\xf2\xfa\x9a\x30\x79\x91\x09\x49\x98\x7a\x77\x7d\xf5\xee\x6d\x5d\x85\x2f\x38\x4e\x48\x02\x9d\x73\xd7\x6e\xc6\xf2\xb4\x4f\x85\xaa\x68\xcf\x4e\x9b\xa1\x39\xab\x4f\x52\xa0\xbd\x3b\x0a\x2e\x1e\xc7\x37\x28\xb8\x68\xf1\xa6\x39\x2e\x1e\xc9\xac\x48\x5b\xdc\x55\x4c\x3c\x92\xbf\x22\xb6\x10\xee\x4f\xa6\xfb\x27\x3a\xc7\xfe\x64\xa7\xa5\xa5\xd8\xae\xf3\x4c\x3e\x9a\x7b\x50\xd1\xb7\x1d\x55\x9c\x73\x72\x0b\x21\x2d\xda\x7e\x6e\x32\xd3\xe3\x31\xf6\x09\xef\x94\xc3\xaa\xb0\xbf\x7b\xa2\x94\x86\x64\xa5\x53\x64\x4b\xcb\xfa\x82\xe9\x0c\x7b\x4d\xd1\xc9\xdd\x5c\xfc\x9c\x93\xde\xdc\x0d\x9d\xe3\xd7\x17\x47\x8f\x01\x51\x74\x9d\x48\xf6\x1d\xd6\x19\x28\x9b\xb0\x13\x4b\x5f\x4b\x9d\x81\xd0\xf3\x9d\x9c\xb2\xcc\xf2\x73\xeb\x5d\x66\x79\x27\x9f\x71\x61\x75\x86\xdd\xa0\xea\x40\xb9\xb7\x0e\xbf\xa7\x4f\xe1\xfb\x4b\x8f\x43\xd6\x6b\x7e\x5a\xdf\xd9\xce\x87\xfb\xef\xab\xe7\x6b\x9e\xdc\x36\x1f\xdf\x26\xd9\xb5\xfe\xec\x49\xe5\xd7\xfd\xa7\x6d\x73\x51\x60\x06\x62\x8a\x85\x58\x40\xfd\x41\x22\x5c\xbe\xd8\x07\x47\x35\xab\x98\x5a\xd1\xd0\x70\x54\x4f\x4b\x77\x3e\x54\x94\xcb\x0e\x7a\x63\xe1\x2d\xa6\xea\xcb\xc3\x03\x2b\xa8\xff\x3d\xab\xd8\x7e\xcf\x18\x82\xec\x4d\x72\x4a\xb1\x87\xc1\x7f\x6a\x36\xd4\x01\xdb\xde\x41\x5f\x0f\xfd\x1b\xfa\xd8\xf6\x67\x67\x34\x7f\xbd\x84\x37\x55\xe4\x1f\xf0\xcd\x50\xff\x7a\xd8\x4f\x3a\xae\x0f\xa8\x46\x04\x7f\x3d\xe8\x07\xd4\x86\x3d\xde\x1f\x8f\x41\x9f\x0f\x93\xec\x7a\xff\x65\xf9\x7e\xcd\x9a\x23\x04\xe0\x4c\xbf\xa0\x56\x43\xd5\x29\xe7\x39\x5c\xaa\x07\x95\x8f\xf7\x50\xad\xdd\xa1\x2a\xe7\xb2\x81\x36\xe6\xaa\xfe\x1b\x6c\x3e\x1a\x57\xc7\x8f\xe7\xc6\x36\x6a\xd8\xcd\xd2\xbf\x3c\xec\xdd\x79\xb1\x9c\x6f\x82\x36\x85\x2e\xf2\xcb\xf9\x70\x13\x2c\xe7\xc3\xa2\x45\xbe\xde\x4a\xc9\xd9\x11\x8b\x2e\xed\x07\xdb\x3a\xbf\xdc\x79\x5e\x35\x3f\x41\xc6\x80\xf5\xad\x45\x05\xf9\x78\x59\xf5\x31\xe0\x20\xad\x9d\x9c\x94\xf2\x1d\xa0\xb6\xfb\x0c\xef\xb4\x6a\x7f\x4b\x8b\xea\xdb\xdd\x4b\x5e\xb6\x09\x75\x91\x5e\xfe\xf8\xfe\xe3\x6c\x3e\xd4\x44\xcb\x79\xc6\x8a\xad\x34\xfe\x92\x00\x76\xe0\x57\x6c\xc7\xd6\x9e\x96\x83\xa9\x34\xb2\xcc\xd3\x84\xed\x0f\x01\xa7\xfd\x5b\x21\x54\x0f\x9d\x18\xf5\x71\xc6\x70\xb8\xfd\xf2\xf9\x1c\x2e\x9b\x91\x47\x38\xfe\xb0\x41\xe6\xc3\xba\x10\xcc\x87\xf5\x5f\xe1\xfc\x5f\x00\x00\x00\xff\xff\xc7\xf7\x90\xa3\x9f\x33\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 13215, mode: os.FileMode(438), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
